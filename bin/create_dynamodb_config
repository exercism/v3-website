#!/usr/bin/env ruby
require 'exercism_config'
require 'exercism_config'

def create_table(client)
  client.create_table(
    table_name: :config,
    attribute_definitions: [
      {
        attribute_name: "id", 
        attribute_type: "S", 
      },
    ],
    key_schema: [
      {
        attribute_name: "id", 
        key_type: "HASH", 
      }
    ],
    provisioned_throughput: {
      read_capacity_units: 1, 
      write_capacity_units: 1, 
    }
  )
end

def delete_table(client)
  client.delete_table(
    table_name: :config,
  )
end

def set_config_value(client, id, value)
  client.put_item(
    table_name: :config,
    item: {
      id: id,
      value: value
    }
  )
end

client = ExercismConfig::SetupDynamoDBClient.()

begin
  create_table(client)
rescue Aws::DynamoDB::Errors::ResourceInUseException => e
  delete_table(client)
  create_table(client)
end

settings = {
  aws_iterations_bucket: "exercism-staging-iterations",
  dynamodb_tooling_jobs_table: "tooling_jobs"
}
if ENV["EXERCISM_DOCKER"]
  settings.merge!(
    tooling_orchestrator_url: "http://tooling-orchestrator:3021",
    anycable_redis_url: 'redis://redis:6379/1',
    anycable_rpc_host: '0.0.0.0:50051',
    rds_master_endpoint: "mysql",
    rds_port: 3306
  )
else
  settings.merge!(
    tooling_orchestrator_url: "http://127.0.0.1:3021",
    anycable_redis_url: 'redis://127.0.0.1:6379/1',
    anycable_rpc_host: '127.0.0.1:50051',
    rds_master_endpoint: "localhost",
    mysql_socket: "/tmp/mysql.sock"
  )
end

settings.each do |key, value|
  set_config_value(client, key, value)
end

