#page-track-show-unjoined
  = render ViewComponents::Track::TopLevelNav.new(@track, :overview)

  %header.track-header
    .lg-container.container
      = track_icon(@track)
      .info
        %h1= @track.title
        %p= @track.blurb

        .btns.tw-flex.tw-gap-24
          = button_to join_track_path(@track), method: :post, class: "btn-large-cta" do
            = graphical_icon(:plus)
            Join The #{@track.title} Track

          = link_to "#concepts", class: "btn-large-secondary" do
            See Concepts

  %section.about-section
    .md-container.container
      %h2 About #{@track.title}
      .tw-flex.tw-items-start
        .info
          %p C# is a multi-paradigm, statically-typed programming language with object-oriented, declarative, functional, generic, lazy, integrated querying features and type inference.
          %p Statically-typed means that identifiers have a type set at compile time--like those in Java, C++ or Haskell--instead of holding data of any type like those in Python, Ruby or JavaScript.
        %code
          %pre
            :preserve
              class Card
              {
                  static string NewYear(int year = 2020, string sender = "me")
                  {
                      return $"Happy {year} from {sender}!";
                  }
              }

              Card.NewYear();  // => "Happy 2020 from me!"
              Card.Card(1999); // => "Happy 1999 from me!"
              Card.Card(sender: "mom"); // => "Happy 2020 from mom!"

  - unless @track.key_features.empty?
    %section.features-section
      .md-container.container
        %h2 Key Features of #{@track.title}

        .features
          - @track.key_features[0, 6].each do |key_feature|
            .feature
              = graphical_icon :"#{key_feature[:icon]}"
              %h3= key_feature[:title]
              %p= key_feature[:content]

