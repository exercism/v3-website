env:
  aws_region: eu-west-2
  ecr_repository: webservers
  task_definition: .github/config/ecs-task-def.json
  container_name: webserver
  service_name: webservers
  cluster_name: webservers

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

#name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Push puma
        uses: exercism/gha-push-to-ecr@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.aws_region }}
          ecr_repository: "webservers-puma"
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v2
    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: ${{ env.aws_region }}
    #   - name: Login to Amazon ECR
    #     id: login-ecr
    #     uses: aws-actions/amazon-ecr-login@v1
    #   - name: Build, tag, and push image to Amazon ECR
    #     id: build-image
    #     env:
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #       ECR_REPOSITORY: ${{ env.ecr_repository }}
    #       IMAGE_TAG: ${{ github.sha }}
    #     run: |
    #       # Build a docker container and push it to ECR
    #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #       # Retag this as the latest
    #       docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #       echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: ${{ env.task_definition }}
    #    container-name: ${{ env.container_name }}
    #    image: ${{ steps.build-image.outputs.image }}
#      #- name: Deploy Amazon ECS task definition
#      #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      #  with:
#      #    task-definition: ${{ steps.task-def.outputs.task-definition }}
#      #    service: ${{ env.service_name }}
#      #    cluster: ${{ env.cluster_name }}
#      #    wait-for-service-stability: true
