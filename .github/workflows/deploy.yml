name: Deploy to Amazon ECS

env:
  aws_region: eu-west-2
  task_definition: .github/config/ecs-task-def.json
  container_name: webserver
  service_name: webservers
  cluster_name: webservers

  ecr_repository_puma: "webserver-puma"
  dockerfile_puma: "docker/puma.Dockerfile"

  ecr_repository_puma: "webserver-nginx"
  dockerfile_nginx: "docker/nginx.Dockerfile"

on:
  push:
    branches:
      - master

  # TODO: Remove befor merging
  pull_request:
    branches:
      - master

jobs:
  push_puma:
    name: Push puma to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.5
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}

      - name: Login to Amazon ECR
        id: login_to_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login_to_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository_puma }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE: ${{ env.dockerfile_puma }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Retag this as the latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

jobs:
  push_nginx:
    name: Push nginx to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.5
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}

      - name: Login to Amazon ECR
        id: login_to_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login_to_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository_nginx }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE: ${{ env.dockerfile_nginx }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Retag this as the latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  upload_assets:
    name: Upload assets to S3
    needs: [upload_assets]

    runs-on: ubuntu-latest

  deploy:
    name: Deploy to ECS
    # TODO: Check this has all steps
    needs: [push_puma, push_nginx, upload_assets]

    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}

      - name: Login to Amazon ECR
        id: login_to_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Upload the definition for puma
        id: update_definition_for_puma
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.task_definition }}
          container-name: ${{ env.container_name }}
          image: "${{ steps.login_to_ecr.outputs.registry }}/${{ env.ecr_repository_puma }}:${{ github.sha }}"

      - name: Upload the definition for nginx
        id: update_definition_for_nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # TODO: Check this is whatever comes directly before
          task-definition: ${{ steps.update_definition_for_puma.outputs.task-definition }}
          container-name: ${{ env.container_name }}
          image: "${{ steps.login_to_ecr.outputs.registry }}/${{ env.ecr_repository_nginx }}:${{ github.sha }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # TODO: Check this is the latest to run
          task-definition: ${{ steps.update_definition_for_nginx.outputs.task-definition }}
          service: ${{ env.service_name }}
          cluster: ${{ env.cluster_name }}
          wait-for-service-stability: true
